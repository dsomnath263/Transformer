import torch
# # x=torch.arange(0,10,dtype=torch.float).reshape(2,5).unsqueeze(1)
# x=torch.arange(0,10,2)
# # z=torch.zeros(0,10)
# # print(x.shape)
# # print(x.unsqueeze(1).shape)
# # print(x.unsqueeze(1))
# # x=torch.arange(24).reshape(2,3,4)
# # z=torch.arange(5).float()
# # y=x.view(2,-1,6)
# print(x)
# # print(z.softmax(dim=-1))
# x=torch.tensor([3,4,5])
# y=torch.tensor([4,5,3])
# z=torch.cat([x,y])
# print(z.unsqueeze(0)
# p=44
# s=(p==10)
s=torch.triu(torch.ones(1,2,2),diagonal=1).type(torch.int)
decoder_input=torch.tensor([2,3,4,6,6,6])
pad_token=torch.tensor([6])
z=(decoder_input!=pad_token).unsqueeze(0).unsqueeze(0).int() & torch.triu(torch.ones(1,decoder_input.size(0),decoder_input.size(0),diagonal=1).type(torch.int))
print(z)